// <auto-generated />
using System;
using Earmark.Backend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Earmark.Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230705002237_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("Earmark.Backend.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalBalance")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Earmark.Backend.Models.BalanceAmount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MonthId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MonthId");

                    b.ToTable("BalanceAmounts");
                });

            modelBuilder.Entity("Earmark.Backend.Models.BudgetMonth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalUnbudgeted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BudgetMonths");
                });

            modelBuilder.Entity("Earmark.Backend.Models.BudgetedAmount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MonthId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MonthId");

                    b.ToTable("BudgetedAmounts");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Earmark.Backend.Models.CategoryGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CategoryGroups");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Payee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Payees");
                });

            modelBuilder.Entity("Earmark.Backend.Models.RolloverAmount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MonthId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MonthId");

                    b.ToTable("RolloverAmounts");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Memo")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PayeeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TransferTransactionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PayeeId");

                    b.HasIndex("TransferTransactionId")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Account", b =>
                {
                    b.HasOne("Earmark.Backend.Models.Payee", "TransferPayee")
                        .WithOne("TransferAccount")
                        .HasForeignKey("Earmark.Backend.Models.Account", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransferPayee");
                });

            modelBuilder.Entity("Earmark.Backend.Models.BalanceAmount", b =>
                {
                    b.HasOne("Earmark.Backend.Models.Category", "Category")
                        .WithMany("BalanceAmounts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Earmark.Backend.Models.BudgetMonth", "Month")
                        .WithMany("BalanceAmounts")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Earmark.Backend.Models.BudgetedAmount", b =>
                {
                    b.HasOne("Earmark.Backend.Models.Category", "Category")
                        .WithMany("BudgetedAmounts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Earmark.Backend.Models.BudgetMonth", "Month")
                        .WithMany("BudgetedAmounts")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Category", b =>
                {
                    b.HasOne("Earmark.Backend.Models.CategoryGroup", "Group")
                        .WithMany("Categories")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Earmark.Backend.Models.RolloverAmount", b =>
                {
                    b.HasOne("Earmark.Backend.Models.Category", "Category")
                        .WithMany("RolloverAmounts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Earmark.Backend.Models.BudgetMonth", "Month")
                        .WithMany("RolloverAmounts")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Transaction", b =>
                {
                    b.HasOne("Earmark.Backend.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Earmark.Backend.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Earmark.Backend.Models.Payee", "Payee")
                        .WithMany("Transactions")
                        .HasForeignKey("PayeeId");

                    b.HasOne("Earmark.Backend.Models.Transaction", "TransferTransaction")
                        .WithOne()
                        .HasForeignKey("Earmark.Backend.Models.Transaction", "TransferTransactionId");

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("Payee");

                    b.Navigation("TransferTransaction");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Earmark.Backend.Models.BudgetMonth", b =>
                {
                    b.Navigation("BalanceAmounts");

                    b.Navigation("BudgetedAmounts");

                    b.Navigation("RolloverAmounts");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Category", b =>
                {
                    b.Navigation("BalanceAmounts");

                    b.Navigation("BudgetedAmounts");

                    b.Navigation("RolloverAmounts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Earmark.Backend.Models.CategoryGroup", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Earmark.Backend.Models.Payee", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("TransferAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
